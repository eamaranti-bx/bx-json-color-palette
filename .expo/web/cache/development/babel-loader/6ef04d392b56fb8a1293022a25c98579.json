{"ast":null,"code":"import React, { memo, forwardRef } from 'react';\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { usePropsResolution, useStyledSystemPropsResolver } from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nvar _s = $RefreshSig$();\n\nvar Spinner = function Spinner(props, ref) {\n  _s();\n\n  var _ref = usePropsResolution('Spinner', props),\n      color = _ref.color,\n      size = _ref.size,\n      style = _ref.style,\n      resolvedProps = _objectWithoutProperties(_ref, [\"color\", \"size\", \"style\"]);\n\n  var resolvedColor = getColor(color, useTheme().colors, useTheme());\n  var resolvedStyle = useStyledSystemPropsResolver(resolvedProps);\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return React.createElement(ActivityIndicator, {\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\n_s(Spinner, \"mvwPPwpi9UCIBjlqj4wnWHwpLeI=\", false, function () {\n  return [usePropsResolution, useTheme, useTheme, useStyledSystemPropsResolver, useHasResponsiveProps];\n});\n\n_c = Spinner;\nexport default _c2 = memo(_c1 = forwardRef(Spinner));\n\nvar _c, _c1, _c2;\n\n$RefreshReg$(_c, \"Spinner\");\n$RefreshReg$(_c1, \"%default%$memo\");\n$RefreshReg$(_c2, \"%default%\");\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\components\\primitives\\Spinner\\index.js"],"names":["React","memo","forwardRef","usePropsResolution","useStyledSystemPropsResolver","getColor","useHasResponsiveProps","useTheme","Spinner","props","ref","color","size","style","resolvedProps","resolvedColor","colors","resolvedStyle","createElement","ActivityIndicator","accessible","accessibilityLabel"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,UAAtB,QAAwC,OAAxC;;AAEA,SAASC,kBAAT,EAA6BC,4BAA7B,QAAiE,gBAAjE;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,QAAT,QAAyB,gBAAzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,GAAR,EAAgB;;;AAC9B,MAKIP,IAAoC,GAApCA,kBAAkB,CAAC,SAAD,EAAYM,KAAZ,CALtB;AAAA,MACEE,KAAK,GAIHR,IAAoC,CAJtCQ,KADF;AAAA,MAEEC,IAAI,GAGFT,IAAoC,CAHtCS,IAFF;AAAA,MAGEC,KAAK,GAEHV,IAAoC,CAFtCU,KAHF;AAAA,MAIKC,aAAa,GAAA,wBAAA,CACdX,IADc,EACsB,CAJtCQ,OAIsC,EAHtCC,MAGsC,EAFtCC,OAEsC,CADtB,CAJlB;;AAMA,MAAME,aAAa,GAAGV,QAAQ,CAACM,KAAD,EAAQJ,QAAQ,GAAGS,MAAnB,EAA2BT,QAAQ,EAAnC,CAA9B;AACA,MAAMU,aAAa,GAAGb,4BAA4B,CAACU,aAAD,CAAlD;;AAEA,MAAIR,qBAAqB,CAACG,KAAD,CAAzB,EAAkC;AAChC,WAAO,IAAP;AACD;;AAED,SAAoBT,KAAK,CAACkB,aAANlB,CAAoBmB,iBAApBnB,EAAuC;AACzDoB,IAAAA,UAAU,EAAE,IAD6C;AAEzDC,IAAAA,kBAAkB,EAAE,SAFqC;AAGzDV,IAAAA,KAAK,EAAEI,aAHkD;AAIzDL,IAAAA,GAAG,EAAEA,GAJoD;AAKzDE,IAAAA,IAAI,EAAEA,IALmD;AAMzDC,IAAAA,KAAK,EAAE,CAACI,aAAD,EAAgBJ,KAAhB;AANkD,GAAvCb,CAApB;AAQD,CAtBD;;GAAMQ,O,EAAO,8B,EAAA,K,EAAA,YAAA;UAMPL,kB,EACkCI,Q,EAAmBA,Q,EACnCH,4B,EAElBE,qB;;;KAVAE,O;AAwBN,eAA4BP,GAAAA,GAAAA,IAAI,CAAeC,GAAAA,GAAAA,UAAU,CAACM,OAAD,CAAzB,CAAhC","sourcesContent":["import React, { memo, forwardRef } from 'react';\nimport { ActivityIndicator } from 'react-native';\nimport { usePropsResolution, useStyledSystemPropsResolver } from '../../../hooks';\nimport { getColor } from '../../../theme';\nimport { useHasResponsiveProps } from '../../../hooks/useHasResponsiveProps';\nimport { useTheme } from '../../../hooks';\n\nconst Spinner = (props, ref) => {\n  const {\n    color,\n    size,\n    style,\n    ...resolvedProps\n  } = usePropsResolution('Spinner', props);\n  const resolvedColor = getColor(color, useTheme().colors, useTheme());\n  const resolvedStyle = useStyledSystemPropsResolver(resolvedProps); //TODO: refactor for responsive prop\n\n  if (useHasResponsiveProps(props)) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(ActivityIndicator, {\n    accessible: true,\n    accessibilityLabel: \"loading\",\n    color: resolvedColor,\n    ref: ref,\n    size: size,\n    style: [resolvedStyle, style]\n  });\n};\n\nexport default /*#__PURE__*/memo( /*#__PURE__*/forwardRef(Spinner));\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}