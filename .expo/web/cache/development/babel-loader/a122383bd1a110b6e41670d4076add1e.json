{"ast":null,"code":"import { useTheme } from './useTheme';\n\nvar _s = $RefreshSig$();\n\nexport function useResolvedFontFamily(props) {\n  _s();\n\n  var fontFamily = props.fontFamily,\n      fontStyle = props.fontStyle,\n      fontWeight = props.fontWeight;\n  var newFontFamily = fontFamily;\n  var newFontStyle = fontStyle;\n  var newFontWeight = fontWeight;\n  var ref = useTheme(),\n      fontConfig = ref.fontConfig,\n      fontWeights = ref.fontWeights,\n      fonts = ref.fonts;\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    var fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      newFontWeight = undefined;\n      newFontStyle = undefined;\n      var fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      var fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}\n\n_s(useResolvedFontFamily, \"ujuo7wuPU6Gj6tBq5mYfmkDSwuc=\", false, function () {\n  return [useTheme];\n});\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\hooks\\useResolvedFontFamily.js"],"names":["useTheme","useResolvedFontFamily","props","fontFamily","fontStyle","fontWeight","newFontFamily","newFontStyle","newFontWeight","fontConfig","fontWeights","fonts","fontToken","undefined","fontWeightNumber","fontVariant"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;;;;AAWA,OAAM,SAAUC,qBAAV,CAAgCC,KAAhC,EAAuC;;;AAC3C,MACEC,UAAU,GAGRD,KAAK,CAHPC,UADF;AAAA,MAEEC,SAAS,GAEPF,KAAK,CAFPE,SAFF;AAAA,MAGEC,UAAU,GACRH,KAAK,CADPG,UAHF;AAKA,MAAIC,aAAa,GAAGH,UAApB;AACA,MAAII,YAAY,GAAGH,SAAnB;AACA,MAAII,aAAa,GAAGH,UAApB;AACA,MAIIL,GAAU,GAAVA,QAAQ,EAJZ;AAAA,MACES,UAAU,GAGRT,GAAU,CAHZS,UADF;AAAA,MAEEC,WAAW,GAETV,GAAU,CAFZU,WAFF;AAAA,MAGEC,KAAK,GACHX,GAAU,CADZW,KAHF;;AAMA,MAAIN,UAAU,IAAID,SAAdC,IAA2BF,UAA3BE,IAAyCF,UAAU,IAAIQ,KAA3D,EAAkE;AAEhE,QAAMC,SAAS,GAAGD,KAAK,CAACR,UAAD,CAAvB;;AAEA,QAAIM,UAAU,IAAIA,UAAU,CAACG,SAAD,CAA5B,EAAyC;AAKvCJ,MAAAA,aAAa,GAAGK,SAAhBL;AAEAD,MAAAA,YAAY,GAAGM,SAAfN;AACA,UAAIO,gBAAgB,GAAGT,UAAU,IAAIK,WAAdL,GAA4BK,WAAW,CAACL,UAAD,CAAvCA,GAAsDA,UAA7E;AACA,UAAIU,WAAW,GAAGN,UAAU,CAACG,SAAD,CAAVH,CAAsBK,gBAAtBL,CAAlB;;AAEA,UAAI,OAAOM,WAAP,KAAuB,QAA3B,EAAqC;AACnC,YAAIA,WAAW,CAACX,SAAD,CAAf,EAA4BE,aAAa,GAAGS,WAAW,CAACX,SAAD,CAA3BE;AAC7B,OAFD,MAEO;AACLA,QAAAA,aAAa,GAAGS,WAAhBT;AACD;AACF,KAhBD,MAgBO;AACLA,MAAAA,aAAa,GAAGK,KAAK,CAACR,UAAD,CAArBG;AACD;AACF;;AAED,SAAO;AACLH,IAAAA,UAAU,EAAEG,aADP;AAELD,IAAAA,UAAU,EAAEG,aAFP;AAGLJ,IAAAA,SAAS,EAAEG;AAHN,GAAP;AAMF;;GA9CgBN,qB,EAAqB,8B,EAAA,K,EAAA,YAAA;UAa/BD,Q","sourcesContent":["import { useTheme } from './useTheme';\n\n/**\n *\n * @param props\n * @returns resolved fontFamily\n * @description Combination of fontWeight, fontStyle and font family is fully supported on web but on Android we need to pass the exact font family.\n * for e.g. If we load Roboto-Light-Italic.ttf using css, we can use fontFamily: Roboto, fontWeight: 300, fontStyle: italic on web, but same may not work on all the platforms. Other platform needs to set fontFamily: Roboto-Light-Italic in order to work.\n * So this function's purpose is to intake styles like fontFamily: Roboto, fontWeight: 300, fontStyle: Italic and return fontFamily: Roboto-Light-Italic depending upon the fontConfig token in typography theme.\n * This function depends upon fontConfig token in typography for mapping.\n */\nexport function useResolvedFontFamily(props) {\n  const {\n    fontFamily,\n    fontStyle,\n    fontWeight\n  } = props;\n  let newFontFamily = fontFamily;\n  let newFontStyle = fontStyle;\n  let newFontWeight = fontWeight;\n  const {\n    fontConfig,\n    fontWeights,\n    fonts\n  } = useTheme();\n\n  if (fontWeight && fontStyle && fontFamily && fontFamily in fonts) {\n    // TODO: Fix typing remove any.\n    const fontToken = fonts[fontFamily];\n\n    if (fontConfig && fontConfig[fontToken]) {\n      // If a custom font family is resolved, set fontWeight and fontStyle to undefined.\n      // https://github.com/GeekyAnts/NativeBase/issues/3811\n      // On Android, If a fontFamily and fontWeight both are passed, it behaves in a weird way and applies system fonts with passed fontWeight. This happens only for some fontWeights e.g. '700' or 'bold'. So, if we find a custom fontFamily, we remove fontWeight and fontStyle\n      //@ts-ignore\n      newFontWeight = undefined; //@ts-ignore\n\n      newFontStyle = undefined;\n      let fontWeightNumber = fontWeight in fontWeights ? fontWeights[fontWeight] : fontWeight;\n      let fontVariant = fontConfig[fontToken][fontWeightNumber];\n\n      if (typeof fontVariant === 'object') {\n        if (fontVariant[fontStyle]) newFontFamily = fontVariant[fontStyle];\n      } else {\n        newFontFamily = fontVariant;\n      }\n    } else {\n      newFontFamily = fonts[fontFamily];\n    }\n  }\n\n  return {\n    fontFamily: newFontFamily,\n    fontWeight: newFontWeight,\n    fontStyle: newFontStyle\n  };\n}\n//# sourceMappingURL=useResolvedFontFamily.js.map"]},"metadata":{},"sourceType":"module"}