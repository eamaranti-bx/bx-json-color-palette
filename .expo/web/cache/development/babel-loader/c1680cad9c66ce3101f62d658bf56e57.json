{"ast":null,"code":"import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nvar _s = $RefreshSig$(),\n    _s1 = $RefreshSig$();\n\nexport var useMenuTrigger = function useMenuTrigger(param) {\n  var handleOpen = param.handleOpen,\n      isOpen = param.isOpen;\n\n  _s();\n\n  var menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': function onKeyDownCapture(event) {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\n\n_s(useMenuTrigger, \"WIniQbgrG9QuwlCGdx2QSzgUCpE=\", false, function () {\n  return [useId];\n});\n\nexport var useMenu = function useMenu() {\n  _s1();\n\n  var focusManager = useFocusManager();\n\n  var onKeyDown = function onKeyDown(e) {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown: onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\n\n_s1(useMenu, \"TUPiCS0a6rVuat3V2m5berkSuMI=\", false, function () {\n  return [useFocusManager];\n});\n\nexport var useMenuItem = function useMenuItem(param) {\n  var textValue = param.textValue,\n      ref = param.ref;\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: function onHoverIn() {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\nexport var useMenuOptionItem = function useMenuOptionItem(param) {\n  var isChecked = param.isChecked,\n      type = param.type;\n  return {\n    accessibilityRole: 'menuitem' + (Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\nvar ITEM_ATTR = 'data-nativebase-menu-item';\n\nvar getValue = function getValue(element) {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : '';\n};\n\nexport var useMenuTypeahead = function useMenuTypeahead(props) {\n  return {\n    onKeyDown: function onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        var container = event.currentTarget;\n        var values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        var searchKey = event.key;\n        var foundValue = values.find(function (value) {\n          return value.toLowerCase().startsWith(searchKey);\n        });\n        var newItem = container.querySelector(\"[\".concat(ITEM_ATTR, \"=\\\"\").concat(foundValue, \"\\\"]\"));\n\n        if (newItem) {\n          setTimeout(function () {\n            return newItem.focus();\n          });\n        }\n      }\n    }\n  };\n};\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\components\\composites\\Menu\\useMenu.js"],"names":["useFocusManager","useId","useMenuTrigger","handleOpen","isOpen","menuTriggerId","event","includes","key","preventDefault","undefined","useMenu","focusManager","onKeyDown","e","focusNext","wrap","focusPrevious","accessibilityRole","useMenuItem","textValue","ref","dataSet","nativebaseMenuItem","onHoverIn","current","Platform","OS","focus","useMenuOptionItem","isChecked","type","accessibilityState","checked","accessibilityChecked","ITEM_ATTR","getValue","element","_element$getAttribute","getAttribute","useMenuTypeahead","props","length","ctrlKey","altKey","metaKey","container","currentTarget","values","Array","from","querySelectorAll","concat","map","searchKey","foundValue","find","value","toLowerCase","startsWith","newItem","querySelector","setTimeout"],"mappings":"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","sourcesContent":["import { useFocusManager } from '@react-aria/focus';\nimport { useId } from '@react-aria/utils';\nimport { Platform } from 'react-native';\nexport const useMenuTrigger = ({\n  handleOpen,\n  isOpen\n}) => {\n  const menuTriggerId = useId();\n  return {\n    'onKeyDownCapture': event => {\n      if ([' ', 'Enter', 'ArrowUp', 'ArrowDown'].includes(event.key)) {\n        event.preventDefault();\n        handleOpen();\n      }\n    },\n    'aria-haspopup': 'menu',\n    'aria-expanded': isOpen ? true : undefined,\n    'nativeID': menuTriggerId\n  };\n};\nexport const useMenu = () => {\n  const focusManager = useFocusManager();\n\n  const onKeyDown = e => {\n    switch (e.key) {\n      case 'ArrowDown':\n        {\n          e.preventDefault();\n          focusManager.focusNext({\n            wrap: true\n          });\n          break;\n        }\n\n      case 'ArrowUp':\n        {\n          e.preventDefault();\n          focusManager.focusPrevious({\n            wrap: true\n          });\n          break;\n        }\n    }\n  };\n\n  return {\n    onKeyDown,\n    accessibilityRole: 'menu'\n  };\n};\nexport const useMenuItem = ({\n  textValue,\n  ref\n}) => {\n  return {\n    accessibilityRole: 'menuitem',\n    dataSet: {\n      nativebaseMenuItem: textValue\n    },\n    onHoverIn: () => {\n      if (ref.current && Platform.OS === 'web') ref.current.focus();\n    }\n  };\n};\nexport const useMenuOptionItem = ({\n  isChecked,\n  type\n}) => {\n  return {\n    accessibilityRole: 'menuitem' + (Platform.OS === 'web' ? type : ''),\n    accessibilityState: {\n      checked: isChecked\n    },\n    accessibilityChecked: isChecked\n  };\n};\nconst ITEM_ATTR = 'data-nativebase-menu-item';\n\nconst getValue = element => {\n  var _element$getAttribute;\n\n  return (_element$getAttribute = element.getAttribute(ITEM_ATTR)) !== null && _element$getAttribute !== void 0 ? _element$getAttribute : '';\n};\n\nexport const useMenuTypeahead = props => {\n  return {\n    onKeyDown(event) {\n      if (props.onKeyDown) {\n        props.onKeyDown(event);\n      }\n\n      if (event.key.length === 1 && !(event.ctrlKey || event.altKey || event.metaKey)) {\n        const container = event.currentTarget;\n        const values = Array.from(container.querySelectorAll(\"[\".concat(ITEM_ATTR, \"]\"))).map(getValue);\n        const searchKey = event.key;\n        const foundValue = values.find(value => value.toLowerCase().startsWith(searchKey));\n        const newItem = container.querySelector(\"[\".concat(ITEM_ATTR, \"=\\\"\").concat(foundValue, \"\\\"]\"));\n\n        if (newItem) {\n          /**\n           * Imperative focus during keydown is risky so we prevent React's batching updates\n           * to avoid potential bugs. See: https://github.com/facebook/react/issues/20332\n           */\n          setTimeout(() => newItem.focus());\n        }\n      }\n    }\n\n  };\n};\n//# sourceMappingURL=useMenu.js.map"]},"metadata":{},"sourceType":"module"}