{"ast":null,"code":"import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s1, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s1 = _i.next()).done); _n = true) {\n      _arr.push(_s1.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \"function\") {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nvar _s = $RefreshSig$();\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nexport function useTypeahead(props) {\n  _s();\n\n  var defaultValues = _objectSpread({}, dropdownDefaultStateValues);\n\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n\n  var ref = _slicedToArray(React.useReducer(useTypeaheadReducer, defaultValues), 2),\n      state = ref[0],\n      dispatch = ref[1];\n\n  var dispatchWithProps = function dispatchWithProps(object) {\n    dispatch(_objectSpread({}, object, {\n      props: props\n    }));\n  };\n\n  var inputValue = state.inputValue,\n      isOpen = state.isOpen;\n  var items = props.items,\n      onInputValueChange = props.onInputValueChange,\n      onSelectedItemChange = props.onSelectedItemChange,\n      selectedItem = props.selectedItem,\n      itemToString = props.itemToString;\n  var isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(function () {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  var onChangeText = function onChangeText(text) {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  var handleItemSelect = function handleItemSelect(item, index) {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index: index\n    });\n    Keyboard.dismiss();\n  };\n\n  var getMenuItemProps = function getMenuItemProps(item, index) {\n    return {\n      onPress: function onPress() {\n        return handleItemSelect(item, index);\n      },\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  var getMenuProps = function getMenuProps() {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  var getToggleButtonProps = function getToggleButtonProps() {\n    return {\n      onPress: function onPress() {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  var getInputProps = function getInputProps(propInputVal, propOnchangeText) {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps: getInputProps,\n    getMenuItemProps: getMenuItemProps,\n    getMenuProps: getMenuProps,\n    getToggleButtonProps: getToggleButtonProps,\n    isOpen: isOpen\n  };\n}\n\n_s(useTypeahead, \"W/0g4fM6aE87kNZ0Uhdp9P2sXlM=\");\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\components\\composites\\Typeahead\\useTypeahead\\useTypeahead.js"],"names":["useTypeaheadReducer","React","useEffect","stateChangeTypes","dropdownDefaultStateValues","getDefaultValue","isControlledProp","props","key","undefined","useTypeahead","defaultValues","isOpen","state","dispatch","useReducer","dispatchWithProps","object","inputValue","items","onInputValueChange","onSelectedItemChange","selectedItem","itemToString","isControlled","type","ControlledPropUpdatedSelectedItem","onChangeText","text","InputChange","handleItemSelect","item","index","ItemClick","Keyboard","dismiss","getMenuItemProps","onPress","accessible","accessiblityRole","getMenuProps","accessibilityRole","accessibilityHint","concat","length","getToggleButtonProps","ToggleButtonClick","getInputProps","propInputVal","propOnchangeText","value","accessibilityLabel","accessibilityState","expanded"],"mappings":"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","sourcesContent":["import { useTypeaheadReducer } from './reducer';\nimport React, { useEffect } from 'react';\nimport * as stateChangeTypes from './types';\nimport { Keyboard } from 'react-native';\nimport { dropdownDefaultStateValues, getDefaultValue } from './utils';\n\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined;\n}\n\nexport function useTypeahead(props) {\n  let defaultValues = { ...dropdownDefaultStateValues\n  };\n  defaultValues.isOpen = getDefaultValue(props, 'isOpen');\n  const [state, dispatch] = React.useReducer(useTypeaheadReducer, defaultValues);\n\n  const dispatchWithProps = object => {\n    dispatch({ ...object,\n      props\n    });\n  };\n\n  const {\n    inputValue,\n    isOpen\n  } = state;\n  const {\n    items,\n    onInputValueChange,\n    onSelectedItemChange,\n    selectedItem,\n    itemToString\n  } = props;\n  const isControlled = isControlledProp(props, 'selectedItem');\n  useEffect(() => {\n    if (isControlled) {\n      dispatch({\n        type: stateChangeTypes.ControlledPropUpdatedSelectedItem,\n        inputValue: itemToString(selectedItem)\n      });\n    }\n  }, [selectedItem, isControlled, itemToString]);\n\n  const onChangeText = text => {\n    onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange({\n      inputValue: text\n    });\n    dispatchWithProps({\n      type: stateChangeTypes.InputChange,\n      inputValue: text\n    });\n  };\n\n  const handleItemSelect = (item, index) => {\n    onSelectedItemChange === null || onSelectedItemChange === void 0 ? void 0 : onSelectedItemChange(item);\n    dispatchWithProps({\n      type: stateChangeTypes.ItemClick,\n      index\n    });\n    Keyboard.dismiss();\n  };\n\n  const getMenuItemProps = (item, index) => {\n    return {\n      onPress: () => handleItemSelect(item, index),\n      accessible: true,\n      accessiblityRole: 'menuitem'\n    };\n  };\n\n  const getMenuProps = () => {\n    return {\n      accessible: true,\n      accessibilityRole: 'menu',\n      accessibilityHint: \"Showing \".concat(items.length, \" records\")\n    };\n  };\n\n  const getToggleButtonProps = () => {\n    return {\n      onPress: () => {\n        dispatchWithProps({\n          type: stateChangeTypes.ToggleButtonClick\n        });\n      }\n    };\n  };\n\n  const getInputProps = (propInputVal, propOnchangeText) => {\n    return {\n      onChangeText: propInputVal ? propOnchangeText : onChangeText,\n      value: propInputVal ? propInputVal : inputValue,\n      accessibilityRole: 'combobox',\n      accessibilityLabel: 'Typeahead input',\n      accessibilityState: {\n        expanded: isOpen\n      }\n    };\n  };\n\n  return {\n    getInputProps,\n    getMenuItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    isOpen\n  };\n}\n//# sourceMappingURL=useTypeahead.js.map"]},"metadata":{},"sourceType":"module"}