{"ast":null,"code":"import Linking from \"react-native-web/dist/exports/Linking\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \"function\") {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nvar linkToHREF = function linkToHREF(URL) {\n  Linking.openURL(URL).catch(function (err) {\n    return console.error('An error occurred', err);\n  });\n};\n\nvar addOnPressFunctionality = function addOnPressFunctionality(href, callback) {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : function () {};\n};\n\nexport function useLink(props) {\n  var href = props.href,\n      isExternal = props.isExternal,\n      _onPress = props.onPress,\n      _ref = props._ref;\n  var platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href: href,\n      onClick: _onPress\n    };\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: function onPress() {\n        addOnPressFunctionality(href, _onPress);\n      }\n    };\n  }\n\n  return {\n    linkProps: _objectSpread({}, platformLinkProps, {\n      accessibilityRole: 'link',\n      accessible: true\n    })\n  };\n}\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\components\\primitives\\Link\\useLink.js"],"names":["linkToHREF","URL","Linking","openURL","catch","err","console","error","addOnPressFunctionality","href","callback","useLink","props","isExternal","onPress","_ref","platformLinkProps","Platform","OS","onClick","current","target","linkProps","accessibilityRole","accessible"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,UAAU,GAAGC,SAAbD,UAAaC,CAAAA,GAAAA,EAAO;AACxBC,EAAAA,OAAO,CAACC,OAARD,CAAgBD,GAAhBC,EAAqBE,KAArBF,CAA2BG,UAAAA,GAAAA,EAAG;AAAIC,WAAAA,OAAO,CAACC,KAARD,CAAc,mBAAdA,EAAmCD,GAAnCC,CAAAA;GAAlCJ;AACD,CAFD;;AAIA,IAAMM,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,IAAD,EAAOC,QAAP,EAAoB;AAClDD,EAAAA,IAAI,GAAGT,UAAU,CAACS,IAAD,CAAb,GAAsB,EAA1BA;AACAC,EAAAA,QAAQ,GAAGA,QAAQ,EAAX,GAAgB,YAAM,CAAE,CAAhCA;AACD,CAHD;;AAKA,OAAM,SAAUC,OAAV,CAAkBC,KAAlB,EAAyB;AAC7B,MACEH,IAAI,GAIFG,KAAK,CAJPH,IADF;AAAA,MAEEI,UAAU,GAGRD,KAAK,CAHPC,UAFF;AAAA,MAGEC,QAAO,GAELF,KAAK,CAFPE,OAHF;AAAA,MAIEC,IAAI,GACFH,KAAK,CADPG,IAJF;AAMA,MAAIC,iBAAiB,GAAG,EAAxB;;AAEA,MAAIC,QAAQ,CAACC,EAATD,KAAgB,KAApB,EAA2B;AACzBD,IAAAA,iBAAiB,GAAG;AAClBP,MAAAA,IAAI,EAAJA,IADkB;AAElBU,MAAAA,OAAO,EAAEL;AAFS,KAApBE;;AAKA,QAAIH,UAAU,IAAIE,IAAI,CAACK,OAAvB,EAAgC;AAC9BL,MAAAA,IAAI,CAACK,OAALL,CAAaM,MAAbN,GAAsB,QAAtBA;AACD;AACF,GATD,MASO;AACLC,IAAAA,iBAAiB,GAAG;AAClBF,MAAAA,OAAO,EAAE,mBAAM;AACbN,QAAAA,uBAAuB,CAACC,IAAD,EAAOK,QAAP,CAAvBN;AACD;AAHiB,KAApBQ;AAKD;;AAED,SAAO;AACLM,IAAAA,SAAS,EAAA,aAAA,CAAA,EAAA,EAAON,iBAAP,EAAwB;AAC/BO,MAAAA,iBAAiB,EAAE,MADY;AAE/BC,MAAAA,UAAU,EAAE;AAFmB,KAAxB;AADJ,GAAP;AAOF","sourcesContent":["import { Linking, Platform } from 'react-native';\n\nconst linkToHREF = URL => {\n  Linking.openURL(URL).catch(err => console.error('An error occurred', err));\n};\n\nconst addOnPressFunctionality = (href, callback) => {\n  href ? linkToHREF(href) : '';\n  callback ? callback() : () => {};\n};\n\nexport function useLink(props) {\n  const {\n    href,\n    isExternal,\n    onPress,\n    _ref\n  } = props;\n  let platformLinkProps = {};\n\n  if (Platform.OS === 'web') {\n    platformLinkProps = {\n      href,\n      onClick: onPress\n    }; // Adding target to a tag created by RN-Web\n\n    if (isExternal && _ref.current) {\n      _ref.current.target = '_blank';\n    }\n  } else {\n    platformLinkProps = {\n      onPress: () => {\n        addOnPressFunctionality(href, onPress);\n      }\n    };\n  }\n\n  return {\n    linkProps: { ...platformLinkProps,\n      accessibilityRole: 'link',\n      accessible: true\n    }\n  };\n}\n//# sourceMappingURL=useLink.js.map"]},"metadata":{},"sourceType":"module"}