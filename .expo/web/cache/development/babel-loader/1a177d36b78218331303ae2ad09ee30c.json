{"ast":null,"code":"import regeneratorRuntime from \"C:\\\\projects\\\\json-color-palette-generator\\\\node_modules\\\\next\\\\dist\\\\compiled\\\\regenerator-runtime\\\\runtime.js\";\nimport React from 'react';\nimport Clipboard from \"react-native-web/dist/exports/Clipboard\";\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s1, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s1 = _i.next()).done); _n = true) {\n      _arr.push(_s1.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nvar _s = $RefreshSig$();\n\nexport function useClipboard() {\n  _s();\n\n  var ref = _slicedToArray(React.useState(false), 2),\n      hasCopied = ref[0],\n      setHasCopied = ref[1];\n\n  var ref1 = _slicedToArray(React.useState(''), 2),\n      value = ref1[0],\n      setValue = ref1[1];\n\n  var onCopy = function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(copiedValue) {\n      return regeneratorRuntime.wrap(function _callee$(_ctx) {\n        while (1) {\n          switch (_ctx.prev = _ctx.next) {\n            case 0:\n              if (!Clipboard) {\n                _ctx.next = 3;\n                break;\n              }\n\n              _ctx.next = 3;\n              return Clipboard.setString(copiedValue);\n\n            case 3:\n              setValue(copiedValue);\n              setHasCopied(true);\n\n            case 5:\n            case \"end\":\n              return _ctx.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function onCopy(copiedValue) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return {\n    value: value,\n    onCopy: onCopy,\n    hasCopied: hasCopied\n  };\n}\n\n_s(useClipboard, \"wScOM9etQVLLiadMpRhyFbPIYBg=\");\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\hooks\\useClipboard.js"],"names":["React","useClipboard","hasCopied","setHasCopied","useState","value","setValue","onCopy","copiedValue","Clipboard","setString"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAM,SAAUC,YAAV,GAAyB;;;AAC7B,MAAkCD,GAAqB,GAAA,cAAA,CAArBA,KAAK,CAACI,QAANJ,CAAe,KAAfA,CAAqB,EAAD,CAAC,CAAvD;AAAA,MAAOE,SAAS,GAAkBF,GAAqB,CAAA,CAAA,CAAvD;AAAA,MAAkBG,YAAY,GAAIH,GAAqB,CAAA,CAAA,CAAvD;;AACA,MAA0BA,IAAkB,GAAA,cAAA,CAAlBA,KAAK,CAACI,QAANJ,CAAe,EAAfA,CAAkB,EAAD,CAAC,CAA5C;AAAA,MAAOK,KAAK,GAAcL,IAAkB,CAAA,CAAA,CAA5C;AAAA,MAAcM,QAAQ,GAAIN,IAAkB,CAAA,CAAA,CAA5C;;AAEA,MAAMO,MAAM,GAAA,YAAA;yDAAG,SAAQ,OAAR,CAAMC,WAAN,EAAqB;;;;;mBAC9BC,S,EAAS;;;;;;qBACLA,SAAS,CAACC,SAAVD,CAAoBD,WAApBC,C;;;AAGRH,cAAAA,QAAQ,CAACE,WAAD,CAARF;AACAH,cAAAA,YAAY,CAAC,IAAD,CAAZA;;;;;;;;AACD,K;;oBAPKI,M,CAAeC,W,EAAW;;;GAApB,EAAZ;;AASA,SAAO;AACLH,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,MAAM,EAANA,MAFK;AAGLL,IAAAA,SAAS,EAATA;AAHK,GAAP;AAMF;;GAnBgBD,Y,EAAY,8B","sourcesContent":["import React from 'react';\nimport { Clipboard } from 'react-native';\nexport function useClipboard() {\n  const [hasCopied, setHasCopied] = React.useState(false);\n  const [value, setValue] = React.useState('');\n\n  const onCopy = async copiedValue => {\n    if (Clipboard) {\n      await Clipboard.setString(copiedValue);\n    }\n\n    setValue(copiedValue);\n    setHasCopied(true);\n  };\n\n  return {\n    value,\n    onCopy,\n    hasCopied\n  };\n}\n//# sourceMappingURL=useClipboard.js.map"]},"metadata":{},"sourceType":"module"}