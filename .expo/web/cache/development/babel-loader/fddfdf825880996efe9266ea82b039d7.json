{"ast":null,"code":"import Color from 'tinycolor2';\nimport { useToken } from './useToken';\nimport { useAccessibleColors } from '../core/color-mode/hooks';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s1, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s1 = _i.next()).done); _n = true) {\n      _arr.push(_s1.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nvar _s = $RefreshSig$();\n\nexport function useContrastText(bg, color, disableContrastText) {\n  _s();\n\n  var ref = _slicedToArray(useToken('colors', ['contrastThreshold', 'darkText', 'lightText', bg, color !== null && color !== void 0 ? color : '']), 5),\n      contrastThreshold = ref[0],\n      trueDarkText = ref[1],\n      trueLightText = ref[2],\n      trueBg = ref[3],\n      trueColor = ref[4];\n\n  var suppressColorAccessibilityWarning = useNativeBaseConfig('NativeBaseConfigProvider').config.suppressColorAccessibilityWarning;\n\n  var ref1 = _slicedToArray(useAccessibleColors(), 1),\n      accessibleColors = ref1[0];\n\n  if (disableContrastText) {\n    return;\n  }\n\n  if (typeof bg !== 'string') {\n    return;\n  }\n\n  var ref2 = _slicedToArray(bg.split('.'), 2),\n      bgThemeColorVariant = ref2[0],\n      bgShade = ref2[1];\n\n  var textColor = !accessibleColors && bgThemeColorVariant && themeColorsThresholdShades[bgThemeColorVariant] ? getContrastThemeColor(bgThemeColorVariant, bgShade) : getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning);\n  return textColor;\n}\n\n_s(useContrastText, \"58BNvk+LdP7liE5kbrfaywlfiwE=\", false, function () {\n  return [useToken, useNativeBaseConfig, useAccessibleColors];\n});\n\nfunction getContrastThemeColor(bgThemeColorVariant, bgShade) {\n  var shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n\n  if (bgShade && shadeThreshold && (bgShade >= shadeThreshold && bgThemeColorVariant !== 'dark' || bgThemeColorVariant === 'dark' && bgShade < shadeThreshold)) {\n    return 'lightText';\n  }\n\n  return 'darkText';\n}\n\nfunction getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning) {\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n\n  var trueContrastColor;\n  var contrastColorToken;\n  var darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  var lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (darkTextConstrast >= contrastThreshold || darkTextConstrast > lightTextConstrast) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (\"development\" !== 'production') {\n    var contrast = getContrastRatio(trueBg, trueColor ? trueColor : trueContrastColor);\n\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn([\"NativeBase: The contrast ratio of \".concat(contrast, \":1 for \").concat(color ? color : contrastColorToken, \" on \").concat(bg), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n    }\n  }\n\n  return contrastColorToken;\n}\n\nfunction getContrastRatio(foreground, background) {\n  var lumA = Color(foreground).getLuminance();\n  var lumB = Color(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nvar themeColorsThresholdShades = {\n  rose: 500,\n  pink: 500,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  tertiary: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 500,\n  orange: 500,\n  red: 500,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 500,\n  error: 500,\n  success: 400,\n  warning: 500,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500\n};\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\hooks\\useContrastText.js"],"names":["Color","useToken","useAccessibleColors","useNativeBaseConfig","useContrastText","bg","color","disableContrastText","contrastThreshold","trueDarkText","trueLightText","trueBg","trueColor","suppressColorAccessibilityWarning","config","accessibleColors","bgThemeColorVariant","bgShade","split","textColor","themeColorsThresholdShades","getContrastThemeColor","getAccessibleContrastColor","shadeThreshold","trueContrastColor","contrastColorToken","darkTextConstrast","getContrastRatio","lightTextConstrast","contrast","console","warn","concat","join","foreground","background","lumA","getLuminance","lumB","Math","max","min","rose","pink","fuchsia","purple","violet","indigo","blue","lightBlue","cyan","teal","emerald","tertiary","green","lime","yellow","amber","orange","red","warmGray","trueGray","gray","coolGray","blueGray","dark","danger","error","success","warning","muted","primary","info","secondary","light"],"mappings":"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","sourcesContent":["import Color from 'tinycolor2';\nimport { useToken } from './useToken';\nimport { useAccessibleColors } from '../core/color-mode/hooks';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nexport function useContrastText(bg, color, disableContrastText) {\n  const [contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor] = useToken('colors', ['contrastThreshold', 'darkText', 'lightText', bg, color !== null && color !== void 0 ? color : '']);\n  const suppressColorAccessibilityWarning = useNativeBaseConfig('NativeBaseConfigProvider').config.suppressColorAccessibilityWarning;\n  const [accessibleColors] = useAccessibleColors();\n\n  if (disableContrastText) {\n    return;\n  }\n\n  if (typeof bg !== 'string') {\n    return;\n  }\n\n  const [bgThemeColorVariant, bgShade] = bg.split('.');\n  const textColor = !accessibleColors && bgThemeColorVariant && themeColorsThresholdShades[bgThemeColorVariant] ? getContrastThemeColor(bgThemeColorVariant, bgShade) : getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning);\n  return textColor;\n}\n\nfunction getContrastThemeColor(bgThemeColorVariant, bgShade) {\n  const shadeThreshold = themeColorsThresholdShades[bgThemeColorVariant];\n\n  if (bgShade && shadeThreshold && (bgShade >= shadeThreshold && bgThemeColorVariant !== 'dark' || bgThemeColorVariant === 'dark' && bgShade < shadeThreshold)) {\n    return 'lightText';\n  }\n\n  return 'darkText';\n}\n\nfunction getAccessibleContrastColor(contrastThreshold, trueDarkText, trueLightText, trueBg, trueColor, bg, color, suppressColorAccessibilityWarning) {\n  if (typeof trueBg !== 'string') {\n    trueBg = bg;\n  }\n\n  let trueContrastColor;\n  let contrastColorToken;\n  let darkTextConstrast = getContrastRatio(trueBg, trueDarkText);\n  let lightTextConstrast = getContrastRatio(trueBg, trueLightText);\n\n  if (darkTextConstrast >= contrastThreshold || darkTextConstrast > lightTextConstrast) {\n    trueContrastColor = trueDarkText;\n    contrastColorToken = 'darkText';\n  } else {\n    trueContrastColor = trueLightText;\n    contrastColorToken = 'lightText';\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    const contrast = getContrastRatio(trueBg, trueColor ? trueColor : trueContrastColor);\n\n    if (contrast < 3 && !suppressColorAccessibilityWarning) {\n      console.warn([\"NativeBase: The contrast ratio of \".concat(contrast, \":1 for \").concat(color ? color : contrastColorToken, \" on \").concat(bg), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\\n'));\n    }\n  }\n\n  return contrastColorToken;\n}\n\nfunction getContrastRatio(foreground, background) {\n  const lumA = Color(foreground).getLuminance();\n  const lumB = Color(background).getLuminance();\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n\nconst themeColorsThresholdShades = {\n  rose: 500,\n  pink: 500,\n  fuchsia: 800,\n  purple: 700,\n  violet: 600,\n  indigo: 500,\n  blue: 400,\n  lightBlue: 400,\n  cyan: 300,\n  teal: 300,\n  emerald: 300,\n  tertiary: 300,\n  green: 400,\n  lime: 600,\n  yellow: 800,\n  amber: 500,\n  orange: 500,\n  red: 500,\n  warmGray: 500,\n  trueGray: 500,\n  gray: 500,\n  coolGray: 500,\n  blueGray: 500,\n  dark: 500,\n  danger: 500,\n  error: 500,\n  success: 400,\n  warning: 500,\n  muted: 500,\n  primary: 500,\n  info: 400,\n  secondary: 500,\n  light: 500\n};\n//# sourceMappingURL=useContrastText.js.map"]},"metadata":{},"sourceType":"module"}