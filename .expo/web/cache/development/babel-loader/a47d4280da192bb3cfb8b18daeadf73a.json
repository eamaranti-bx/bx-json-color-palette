{"ast":null,"code":"import { mode } from '../tools';\nimport Platform from \"react-native-web/dist/exports/Platform\";\n\nfunction getSelectionColor(props) {\n  if (Platform.OS === 'ios') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  } else if (Platform.OS === 'android') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  }\n}\n\nvar baseStyle = function baseStyle(props) {\n  return {\n    selectionColor: getSelectionColor(props),\n    fontFamily: 'body',\n    p: '2',\n    borderRadius: 'sm',\n    overflow: 'hidden',\n    color: mode('coolGray.800', 'warmGray.50')(props),\n    placeholderTextColor: 'muted.400',\n    borderColor: mode('muted.200', 'gray.500')(props),\n    _disabled: {\n      opacity: '80',\n      bg: mode('muted.100', 'muted.700')(props)\n    },\n    _invalid: {\n      borderColor: mode('danger.600', 'danger.300')(props)\n    },\n    _focus: {\n      borderColor: mode('primary.400', 'primary.500')(props)\n    },\n    _web: {\n      outlineWidth: '0',\n      overflow: 'auto',\n      lineHeight: 'lg'\n    }\n  };\n};\n\nfunction roundedStyle(props) {\n  return {\n    borderRadius: '25',\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props)\n    }\n  };\n}\n\nfunction outlineStyle(props) {\n  return {\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props)\n    }\n  };\n}\n\nfunction filledStyle(props) {\n  return {\n    bg: props.bg || mode('muted.200', 'muted.600')(props),\n    borderWidth: '1',\n    borderColor: 'transparent',\n    _hover: {\n      bg: mode('muted.300', 'muted.700')(props)\n    }\n  };\n}\n\nfunction unstyledStyle() {\n  return {\n    borderWidth: '0'\n  };\n}\n\nfunction underlinedStyle() {\n  return {\n    borderRadius: '0',\n    borderTopWidth: '0',\n    borderLeftWidth: '0',\n    borderRightWidth: '0',\n    borderBottomWidth: '1'\n  };\n}\n\nvar variants = {\n  outline: outlineStyle,\n  underlined: underlinedStyle,\n  rounded: roundedStyle,\n  filled: filledStyle,\n  unstyled: unstyledStyle\n};\nvar sizes = {\n  '2xl': {\n    fontSize: 'xl'\n  },\n  'xl': {\n    fontSize: 'lg'\n  },\n  'lg': {\n    fontSize: 'md'\n  },\n  'md': {\n    fontSize: 'sm'\n  },\n  'sm': {\n    fontSize: 'xs'\n  },\n  'xs': {\n    fontSize: '2xs'\n  }\n};\nvar defaultProps = {\n  size: 'sm',\n  variant: 'outline'\n};\nexport var Input = {\n  baseStyle: baseStyle,\n  defaultProps: defaultProps,\n  variants: variants,\n  sizes: sizes\n};\nexport default {};\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\theme\\components\\input.js"],"names":["mode","getSelectionColor","props","Platform","OS","baseStyle","selectionColor","fontFamily","p","borderRadius","overflow","color","placeholderTextColor","borderColor","_disabled","opacity","bg","_invalid","_focus","_web","outlineWidth","lineHeight","roundedStyle","borderWidth","_hover","outlineStyle","filledStyle","unstyledStyle","underlinedStyle","borderTopWidth","borderLeftWidth","borderRightWidth","borderBottomWidth","variants","outline","underlined","rounded","filled","unstyled","sizes","fontSize","defaultProps","size","variant","Input"],"mappings":"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","sourcesContent":["import { mode } from '../tools';\nimport { Platform } from 'react-native';\n\nfunction getSelectionColor(props) {\n  if (Platform.OS === 'ios') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  } else if (Platform.OS === 'android') {\n    return mode('coolGray.800', 'warmGray.50')(props);\n  }\n}\n\nconst baseStyle = props => {\n  // const { primary } = props.theme.colors;\n  // Todo: Resolve boxShadow Color or Provide some alternatiove prop for user to change focusRing color\n  // // Todo: Update to support similar focusRing on iOS , Android and Web\n  // const focusRing =\n  //   Platform.OS === 'web'\n  //     ? {\n  //         boxShadow:\n  //           props.variant !== 'underlined'\n  //             ? `${primary[400]} 0px 0px 0px 1px`\n  //             : `${primary[400]} 0px 1px 0px 0px`,\n  //         zIndex: 1,\n  //       }\n  //     : {\n  //         // boxShadow: `${useToken('colors', ['primary.400'])} 0px 0px 0px 1px`,\n  //       };\n  return {\n    selectionColor: getSelectionColor(props),\n    fontFamily: 'body',\n    p: '2',\n    borderRadius: 'sm',\n    overflow: 'hidden',\n    color: mode('coolGray.800', 'warmGray.50')(props),\n    placeholderTextColor: 'muted.400',\n    borderColor: mode('muted.200', 'gray.500')(props),\n    _disabled: {\n      opacity: '80',\n      bg: mode('muted.100', 'muted.700')(props)\n    },\n    _invalid: {\n      borderColor: mode('danger.600', 'danger.300')(props)\n    },\n    _focus: {\n      borderColor: mode('primary.400', 'primary.500')(props)\n    },\n    _web: {\n      outlineWidth: '0',\n      overflow: 'auto',\n      lineHeight: 'lg' // Todo: Move to _web inside size so that sm and xs don't have this much height\n\n    }\n  };\n};\n\nfunction roundedStyle(props) {\n  return {\n    borderRadius: '25',\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props)\n    }\n  };\n}\n\nfunction outlineStyle(props) {\n  return {\n    borderWidth: '1',\n    _hover: {\n      bg: mode('gray.100', 'gray.700')(props)\n    }\n  };\n}\n\nfunction filledStyle(props) {\n  return {\n    bg: props.bg || mode('muted.200', 'muted.600')(props),\n    borderWidth: '1',\n    borderColor: 'transparent',\n    _hover: {\n      bg: mode('muted.300', 'muted.700')(props)\n    }\n  };\n}\n\nfunction unstyledStyle() {\n  return {\n    borderWidth: '0'\n  };\n}\n\nfunction underlinedStyle() {\n  return {\n    borderRadius: '0',\n    borderTopWidth: '0',\n    borderLeftWidth: '0',\n    borderRightWidth: '0',\n    borderBottomWidth: '1'\n  };\n}\n\nconst variants = {\n  outline: outlineStyle,\n  underlined: underlinedStyle,\n  rounded: roundedStyle,\n  filled: filledStyle,\n  unstyled: unstyledStyle\n};\nconst sizes = {\n  '2xl': {\n    fontSize: 'xl'\n  },\n  'xl': {\n    fontSize: 'lg'\n  },\n  'lg': {\n    fontSize: 'md'\n  },\n  'md': {\n    fontSize: 'sm'\n  },\n  'sm': {\n    fontSize: 'xs'\n  },\n  'xs': {\n    fontSize: '2xs'\n  }\n};\nconst defaultProps = {\n  size: 'sm',\n  variant: 'outline'\n}; // Input\n\nexport const Input = {\n  baseStyle,\n  defaultProps,\n  variants,\n  sizes\n};\nexport default {};\n//# sourceMappingURL=input.js.map"]},"metadata":{},"sourceType":"module"}