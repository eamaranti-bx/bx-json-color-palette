{"ast":null,"code":"import React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from './../theme';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport { defaultConfig, NativeBaseConfigProvider } from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport useWindowDimensions from \"react-native-web/dist/exports/useWindowDimensions\";\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery';\n\nvar _s = $RefreshSig$(),\n    _s1 = $RefreshSig$();\n\nvar defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: defaultInitialWindowMetrics\n});\n\nvar NativeBaseProvider = function NativeBaseProvider(props) {\n  _s();\n\n  var _config$theme, _useWindowDimensions;\n\n  var colorModeManager = props.colorModeManager,\n      _config = props.config,\n      config = _config === void 0 ? defaultConfig : _config,\n      children = props.children,\n      tmp = props.theme,\n      propsTheme = tmp === void 0 ? defaultTheme : tmp,\n      initialWindowMetrics = props.initialWindowMetrics,\n      isSSR = props.isSSR,\n      disableContrastText = props.disableContrastText;\n  var theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  var newTheme = React.useMemo(function () {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n  var windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  var currentBreakpoint = React.useMemo(function () {\n    return getClosestBreakpoint(newTheme.breakpoints, windowWidth);\n  }, [windowWidth, newTheme.breakpoints]);\n  return React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, React.createElement(OverlayProvider, null, React.createElement(ToastProvider, null, React.createElement(InitializeToastRef, null), React.createElement(SSRProvider, null, children)))))));\n};\n\n_s(NativeBaseProvider, \"Z0TOhoRd7K5V5p+vKVujSUGdVHA=\", false, function () {\n  return [useWindowDimensions];\n});\n\n_c = NativeBaseProvider;\n\nvar InitializeToastRef = function InitializeToastRef() {\n  _s1();\n\n  var toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\n_s1(InitializeToastRef, \"WUU7e0p6AiTpvVrXhi50JBdcu+0=\", false, function () {\n  return [useToast];\n});\n\n_c1 = InitializeToastRef;\nexport { NativeBaseProvider };\n\nvar _c, _c1;\n\n$RefreshReg$(_c, \"NativeBaseProvider\");\n$RefreshReg$(_c1, \"InitializeToastRef\");\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\core\\NativeBaseProvider.js"],"names":["React","SafeAreaProvider","initialWindowMetrics","defaultInitialWindowMetrics","SSRProvider","theme","defaultTheme","HybridProvider","OverlayProvider","ToastProvider","ToastRef","defaultConfig","NativeBaseConfigProvider","useToast","getClosestBreakpoint","platformSpecificSpaceUnits","ResponsiveQueryProvider","defaultInitialWindowMetricsBasedOnPlatform","Platform","select","web","frame","x","y","width","height","insets","top","left","right","bottom","default","NativeBaseProvider","props","_config$theme","_useWindowDimensions","colorModeManager","config","children","propsTheme","isSSR","disableContrastText","newTheme","useMemo","enableRem","windowWidth","useWindowDimensions","currentBreakpoint","breakpoints","createElement","initialMetrics","disableCSSMediaQueries","options","InitializeToastRef","toast","current"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { SafeAreaProvider, initialWindowMetrics as defaultInitialWindowMetrics } from 'react-native-safe-area-context';\nimport { SSRProvider } from '@react-native-aria/utils';\nimport { theme as defaultTheme } from './../theme';\nimport HybridProvider from './hybrid-overlay/HybridProvider';\nimport { OverlayProvider } from '@react-native-aria/overlays';\nimport { ToastProvider, ToastRef } from '../components/composites/Toast';\nimport { defaultConfig, NativeBaseConfigProvider } from './NativeBaseContext';\nimport { useToast } from '../components/composites/Toast';\nimport { Platform, useWindowDimensions } from 'react-native';\nimport { getClosestBreakpoint, platformSpecificSpaceUnits } from '../theme/tools/utils';\nimport { ResponsiveQueryProvider } from '../utils/useResponsiveQuery'; // For SSR to work, we need to pass initial insets as 0 values on web.\n// https://github.com/th3rdwave/react-native-safe-area-context/issues/132\n\nconst defaultInitialWindowMetricsBasedOnPlatform = Platform.select({\n  web: {\n    frame: {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    },\n    insets: {\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0\n    }\n  },\n  default: defaultInitialWindowMetrics\n});\n\nconst NativeBaseProvider = props => {\n  var _config$theme, _useWindowDimensions;\n\n  const {\n    colorModeManager,\n    config = defaultConfig,\n    children,\n    theme: propsTheme = defaultTheme,\n    initialWindowMetrics,\n    isSSR,\n    disableContrastText\n  } = props;\n  const theme = (_config$theme = config.theme) !== null && _config$theme !== void 0 ? _config$theme : propsTheme;\n  const newTheme = React.useMemo(() => {\n    if (config.enableRem) {\n      return platformSpecificSpaceUnits(theme);\n    }\n\n    return theme;\n  }, [config.enableRem, theme]);\n  const windowWidth = (_useWindowDimensions = useWindowDimensions()) === null || _useWindowDimensions === void 0 ? void 0 : _useWindowDimensions.width;\n  const currentBreakpoint = React.useMemo(() => getClosestBreakpoint(newTheme.breakpoints, windowWidth), [windowWidth, newTheme.breakpoints]);\n  return /*#__PURE__*/React.createElement(NativeBaseConfigProvider, {\n    theme: newTheme,\n    config: config,\n    currentBreakpoint: currentBreakpoint,\n    isSSR: isSSR,\n    disableContrastText: disableContrastText\n  }, /*#__PURE__*/React.createElement(SafeAreaProvider, {\n    initialMetrics: initialWindowMetrics !== null && initialWindowMetrics !== void 0 ? initialWindowMetrics : defaultInitialWindowMetricsBasedOnPlatform\n  }, /*#__PURE__*/React.createElement(ResponsiveQueryProvider, {\n    disableCSSMediaQueries: !isSSR\n  }, /*#__PURE__*/React.createElement(HybridProvider, {\n    colorModeManager: colorModeManager,\n    options: theme.config\n  }, /*#__PURE__*/React.createElement(OverlayProvider, null, /*#__PURE__*/React.createElement(ToastProvider, null, /*#__PURE__*/React.createElement(InitializeToastRef, null), /*#__PURE__*/React.createElement(SSRProvider, null, children)))))));\n};\n\nconst InitializeToastRef = () => {\n  const toast = useToast();\n  ToastRef.current = toast;\n  return null;\n};\n\nexport { NativeBaseProvider };\n//# sourceMappingURL=NativeBaseProvider.js.map"]},"metadata":{},"sourceType":"module"}