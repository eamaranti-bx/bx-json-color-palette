{"ast":null,"code":"import { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \"function\") {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nvar _s = $RefreshSig$();\n\nexport function useResponsiveSSRProps(incomingProps) {\n  _s();\n\n  var ref = useState(false),\n      modified = ref[0],\n      setModified = ref[1];\n  var theme = useTheme();\n  var responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  var isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  var modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = _objectSpread({}, modifiedProps, {\n      key: Math.random()\n    });\n  }\n\n  useEffect(function () {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}\n\n_s(useResponsiveSSRProps, \"Kw/cAk4RAmS4LYIKxT5ZS7ff0VE=\", false, function () {\n  return [useTheme, useNativeBaseConfig];\n});\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\hooks\\useResponsiveSSRProps.js"],"names":["useEffect","useState","useTheme","useNativeBaseConfig","isResponsiveAnyProp","useResponsiveSSRProps","incomingProps","modified","setModified","theme","responsivePropsExists","isSSR","modifiedProps","key","Math","random"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,mBAAT,QAAoC,2BAApC;AACA,SAASC,mBAAT,QAAoC,gBAApC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAM,SAAUC,qBAAV,CAAgCC,aAAhC,EAA+C;;;AACnD,MAAgCL,GAAe,GAAfA,QAAQ,CAAC,KAAD,CAAxC;AAAA,MAAOM,QAAQ,GAAiBN,GAAe,CAAA,CAAA,CAA/C;AAAA,MAAiBO,WAAW,GAAIP,GAAe,CAAA,CAAA,CAA/C;AACA,MAAMQ,KAAK,GAAGP,QAAQ,EAAtB;AACA,MAAMQ,qBAAqB,GAAGN,mBAAmB,CAACE,aAAD,EAAgBG,KAAhB,CAAjD;AACA,MAAME,KAAK,GAAGR,mBAAmB,CAAC,4BAAD,CAAnBA,CAAkDQ,KAAhE;AACA,MAAIC,aAAa,GAAGN,aAApB;;AAEA,MAAII,qBAAqB,IAAIC,KAAzBD,IAA8B,CAAKH,QAAvC,EAAiD;AAC/CK,IAAAA,aAAa,GAAA,aAAA,CAAA,EAAA,EAAQA,aAAR,EAAqB;AAChCC,MAAAA,GAAG,EAAEC,IAAI,CAACC,MAALD;AAD2B,KAArB,CAAbF;AAGD;;AAEDZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,qBAAqB,IAAIC,KAA7B,EAAoC;AAClCH,MAAAA,WAAW,CAAC,IAAD,CAAXA;AACD;AACF,GAJQ,EAIN,CAACE,qBAAD,EAAwBC,KAAxB,CAJM,CAATX;AAKA,SAAOY,aAAP;AAEF;;GApBgBP,qB,EAAqB,8B,EAAA,K,EAAA,YAAA;UAErBH,Q,EAEAC,mB","sourcesContent":["import { useEffect, useState } from 'react';\nimport { useTheme } from '../hooks/useTheme';\nimport { useNativeBaseConfig } from '../core/NativeBaseContext';\nimport { isResponsiveAnyProp } from '../theme/tools';\nexport function useResponsiveSSRProps(incomingProps) {\n  const [modified, setModified] = useState(false);\n  const theme = useTheme();\n  const responsivePropsExists = isResponsiveAnyProp(incomingProps, theme);\n  const isSSR = useNativeBaseConfig('useBreakpointResolvedProps').isSSR;\n  let modifiedProps = incomingProps;\n\n  if (responsivePropsExists && isSSR && !modified) {\n    modifiedProps = { ...modifiedProps,\n      key: Math.random()\n    };\n  }\n\n  useEffect(() => {\n    if (responsivePropsExists && isSSR) {\n      setModified(true);\n    }\n  }, [responsivePropsExists, isSSR]);\n  return modifiedProps;\n}\n//# sourceMappingURL=useResponsiveSSRProps.js.map"]},"metadata":{},"sourceType":"module"}