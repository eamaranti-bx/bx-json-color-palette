{"ast":null,"code":"import React, { useMemo } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s1, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s1 = _i.next()).done); _n = true) {\n      _arr.push(_s1.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nvar _s = $RefreshSig$();\n\nvar HybridProvider = function HybridProvider(param) {\n  var children = param.children,\n      _options = param.options,\n      _initialColorMode = _options.initialColorMode,\n      initialColorMode = _initialColorMode === void 0 ? 'light' : _initialColorMode,\n      tmp = _options.accessibleColors,\n      isTextColorAccessible = tmp === void 0 ? false : tmp,\n      useSystemColorMode = _options.useSystemColorMode,\n      colorModeManager = param.colorModeManager;\n\n  _s();\n\n  var ref = useModeManager(initialColorMode, useSystemColorMode, colorModeManager),\n      colorMode = ref.colorMode,\n      setColorMode = ref.setColorMode;\n  var toggleColorMode = React.useCallback(function () {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]);\n\n  var ref1 = _slicedToArray(React.useState(isTextColorAccessible), 2),\n      accessibleColors = ref1[0],\n      setAccessibleColors = ref1[1];\n\n  var contextValue = useMemo(function () {\n    return {\n      colorMode: {\n        colorMode: colorMode,\n        toggleColorMode: toggleColorMode,\n        setColorMode: setColorMode,\n        accessibleColors: accessibleColors,\n        setAccessibleColors: setAccessibleColors\n      }\n    };\n  }, [colorMode, toggleColorMode, setColorMode, accessibleColors, setAccessibleColors]);\n  React.useEffect(function () {\n    var escapeKeyListener = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = function escapeKeyListener(e) {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            var lastHandler = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return function () {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n  return React.createElement(HybridContext.Provider, {\n    value: contextValue\n  }, children);\n};\n\n_s(HybridProvider, \"cJ3ANclVkXhtwe2DpbPBM5bcrCA=\", false, function () {\n  return [useModeManager];\n});\n\n_c = HybridProvider;\nexport default HybridProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"HybridProvider\");\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\core\\hybrid-overlay\\HybridProvider.js"],"names":["React","useMemo","HybridContext","useModeManager","keyboardDismissHandlerManager","HybridProvider","children","options","initialColorMode","accessibleColors","isTextColorAccessible","useSystemColorMode","colorModeManager","colorMode","setColorMode","toggleColorMode","useCallback","setAccessibleColors","useState","contextValue","useEffect","escapeKeyListener","Platform","OS","e","key","length","lastHandler","pop","document","addEventListener","removeEventListener","createElement","Provider","value"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react';\nimport { Platform } from 'react-native';\nimport { HybridContext } from './Context';\nimport { useModeManager } from './../color-mode/hooks';\nimport { keyboardDismissHandlerManager } from '../../hooks';\n\nconst HybridProvider = ({\n  children,\n  options: {\n    initialColorMode = 'light',\n    accessibleColors: isTextColorAccessible = false,\n    useSystemColorMode\n  },\n  colorModeManager\n}) => {\n  // Color-mode content\n  const {\n    colorMode,\n    setColorMode\n  } = useModeManager(initialColorMode, useSystemColorMode, colorModeManager);\n  const toggleColorMode = React.useCallback(() => {\n    setColorMode(colorMode === 'light' ? 'dark' : 'light');\n  }, [colorMode, setColorMode]); // Accessible color hook\n\n  const [accessibleColors, setAccessibleColors] = React.useState(isTextColorAccessible);\n  const contextValue = useMemo(() => {\n    return {\n      colorMode: {\n        colorMode,\n        toggleColorMode,\n        setColorMode,\n        accessibleColors,\n        setAccessibleColors\n      }\n    };\n  }, [colorMode, toggleColorMode, setColorMode, accessibleColors, setAccessibleColors]);\n  React.useEffect(() => {\n    let escapeKeyListener = null;\n\n    if (Platform.OS === 'web') {\n      escapeKeyListener = e => {\n        if (e.key === 'Escape') {\n          if (keyboardDismissHandlerManager.length() > 0) {\n            const lastHandler = keyboardDismissHandlerManager.pop();\n            lastHandler();\n          }\n        }\n      };\n\n      document.addEventListener('keydown', escapeKeyListener);\n    }\n\n    return () => {\n      if (Platform.OS === 'web') {\n        document.removeEventListener('keydown', escapeKeyListener);\n      }\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(HybridContext.Provider, {\n    value: contextValue\n  }, children);\n};\n\nexport default HybridProvider;\n//# sourceMappingURL=HybridProvider.js.map"]},"metadata":{},"sourceType":"module"}