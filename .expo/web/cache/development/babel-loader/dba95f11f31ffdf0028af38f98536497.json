{"ast":null,"code":"import regeneratorRuntime from \"C:\\\\projects\\\\json-color-palette-generator\\\\node_modules\\\\next\\\\dist\\\\compiled\\\\regenerator-runtime\\\\runtime.js\";\nimport React from 'react';\nimport AccessibilityInfo from \"react-native-web/dist/exports/AccessibilityInfo\";\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s1, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s1 = _i.next()).done); _n = true) {\n      _arr.push(_s1.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nvar _s = $RefreshSig$();\n\nexport function useScreenReaderEnabled() {\n  _s();\n\n  var ref = _slicedToArray(React.useState(false), 2),\n      enabled = ref[0],\n      setEnabled = ref[1];\n\n  var mountedRef = React.useRef(false);\n\n  var handleSetEnabled = function handleSetEnabled(value) {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(function () {\n    mountedRef.current = true;\n\n    function setInitialValue() {\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    function _setInitialValue() {\n      _setInitialValue = _asyncToGenerator(regeneratorRuntime.mark(function _callee() {\n        var res;\n        return regeneratorRuntime.wrap(function _callee$(_ctx) {\n          while (1) {\n            switch (_ctx.prev = _ctx.next) {\n              case 0:\n                _ctx.next = 2;\n                return AccessibilityInfo.isScreenReaderEnabled();\n\n              case 2:\n                res = _ctx.sent;\n                handleSetEnabled(res);\n\n              case 4:\n              case \"end\":\n                return _ctx.stop();\n            }\n          }\n        }, _callee);\n      }));\n      return _setInitialValue.apply(this, arguments);\n    }\n\n    var handler = AccessibilityInfo.addEventListener('screenReaderChanged', function (event) {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return function () {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}\n\n_s(useScreenReaderEnabled, \"lYEv5EE4yQebWQ8ZJOJ3Yj+4LBc=\");\n\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\hooks\\useScreenReaderEnabled.js"],"names":["React","useScreenReaderEnabled","enabled","setEnabled","useState","mountedRef","useRef","handleSetEnabled","value","current","useEffect","setInitialValue","res","AccessibilityInfo","isScreenReaderEnabled","handler","addEventListener","event","removeEventListener"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,OAAM,SAAUC,sBAAV,GAAmC;;;AACvC,MAA8BD,GAAqB,GAAA,cAAA,CAArBA,KAAK,CAACI,QAANJ,CAAe,KAAfA,CAAqB,EAAD,CAAC,CAAnD;AAAA,MAAOE,OAAO,GAAgBF,GAAqB,CAAA,CAAA,CAAnD;AAAA,MAAgBG,UAAU,GAAIH,GAAqB,CAAA,CAAA,CAAnD;;AACA,MAAMK,UAAU,GAAGL,KAAK,CAACM,MAANN,CAAa,KAAbA,CAAnB;;AAEA,MAAMO,gBAAgB,GAAGC,SAAnBD,gBAAmBC,CAAAA,KAAAA,EAAS;AAChC,QAAIH,UAAU,CAACI,OAAf,EAAwB;AACtBN,MAAAA,UAAU,CAACK,KAAD,CAAVL;AACD;AACF,GAJD;;AAMAH,EAAAA,KAAK,CAACU,SAANV,CAAgB,YAAM;AACpBK,IAAAA,UAAU,CAACI,OAAXJ,GAAqB,IAArBA;;aAEeM,e,GAAe;aAAfA,gBAAe,CAAA,KAAfA,CAAe,IAAfA,EAAe,SAAfA,C;;;aAAAA,gB,GAAe;AAAfA,MAAAA,gBAAe,GAAA,iBAAA,CAAA,kBAAA,CAAA,IAAA,CAA9B,SAAQ,OAAR,GAAiC;YACzBC,G;;;;;;uBAAYC,iBAAiB,CAACC,qBAAlBD,E;;;AAAZD,gBAAAA,GAAG,GAAA,IAAA,CAAA,IAAHA;AACNL,gBAAAA,gBAAgB,CAACK,GAAD,CAAhBL;;;;;;;;AACD,OAH6B,CAAA,CAAfI;aAAAA,gBAAe,CAAA,KAAfA,CAAe,IAAfA,EAAe,SAAfA,C;;;AAKf,QAAII,OAAO,GAAGF,iBAAiB,CAACG,gBAAlBH,CAAmC,qBAAnCA,EAA0DI,UAAAA,KAAAA,EAAS;AAC/EV,MAAAA,gBAAgB,CAACU,KAAD,CAAhBV;AACD,KAFaM,CAAd;AAGAF,IAAAA,eAAe;AACf,WAAO,YAAM;AACXN,MAAAA,UAAU,CAACI,OAAXJ,GAAqB,KAArBA;AACAQ,MAAAA,iBAAiB,CAACK,mBAAlBL,CAAsC,qBAAtCA,EAA6DE,OAA7DF;AACD,KAHD;AAID,GAhBDb;AAiBA,SAAOE,OAAP;AAEF;;GA7BgBD,sB,EAAsB,8B","sourcesContent":["import React from 'react';\nimport { AccessibilityInfo } from 'react-native';\nexport function useScreenReaderEnabled() {\n  const [enabled, setEnabled] = React.useState(false);\n  const mountedRef = React.useRef(false);\n\n  const handleSetEnabled = value => {\n    if (mountedRef.current) {\n      setEnabled(value);\n    }\n  };\n\n  React.useEffect(() => {\n    mountedRef.current = true;\n\n    async function setInitialValue() {\n      const res = await AccessibilityInfo.isScreenReaderEnabled();\n      handleSetEnabled(res);\n    }\n\n    let handler = AccessibilityInfo.addEventListener('screenReaderChanged', event => {\n      handleSetEnabled(event);\n    });\n    setInitialValue();\n    return () => {\n      mountedRef.current = false;\n      AccessibilityInfo.removeEventListener('screenReaderChanged', handler);\n    };\n  });\n  return enabled;\n}\n//# sourceMappingURL=useScreenReaderEnabled.js.map"]},"metadata":{},"sourceType":"module"}