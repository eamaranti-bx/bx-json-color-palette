{"ast":null,"code":"import * as stateChangeTypes from './types';\nimport { getDefaultValue } from './utils';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === \"function\") {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nexport function useTypeaheadReducer(state, action) {\n  var type = action.type,\n      props = action.props;\n  var changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false\n        };\n      }\n\n      break;\n\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return _objectSpread({}, state, changes);\n}\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\components\\composites\\Typeahead\\useTypeahead\\reducer.js"],"names":["stateChangeTypes","getDefaultValue","useTypeaheadReducer","state","action","type","props","changes","ItemClick","isOpen","selectedItem","items","index","inputValue","itemToString","InputBlur","InputChange","ToggleButtonClick","FunctionToggleMenu","FunctionOpenMenu","FunctionCloseMenu","FunctionSelectItem","ControlledPropUpdatedSelectedItem","FunctionSetInputValue","FunctionReset","Error"],"mappings":"AAAA,OAAM,KAAMA,gBAAZ,MAAkC,SAAlC;AACA,SAASC,eAAT,QAAgC,SAAhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAM,SAAUC,mBAAV,CAA8BC,KAA9B,EAAqCC,MAArC,EAA6C;AACjD,MACEC,IAAI,GAEFD,MAAM,CAFRC,IADF;AAAA,MAEEC,KAAK,GACHF,MAAM,CADRE,KAFF;AAIA,MAAIC,OAAJ;;AAEA,UAAQF,IAAR;AACE,SAAKL,gBAAgB,CAACQ,SAAtB;AACED,MAAAA,OAAO,GAAG;AACRE,QAAAA,MAAM,EAAER,eAAe,CAACK,KAAD,EAAQ,QAAR,CADf;AAERI,QAAAA,YAAY,EAAEJ,KAAK,CAACK,KAANL,CAAYF,MAAM,CAACQ,KAAnBN,CAFN;AAGRO,QAAAA,UAAU,EAAEP,KAAK,CAACQ,YAANR,CAAmBA,KAAK,CAACK,KAANL,CAAYF,MAAM,CAACQ,KAAnBN,CAAnBA;AAHJ,OAAVC;AAKA;;AAEF,SAAKP,gBAAgB,CAACe,SAAtB;AACE,UAAIZ,KAAK,CAACM,MAAV,EAAkB;AAChBF,QAAAA,OAAO,GAAG;AACRE,UAAAA,MAAM,EAAE;AADA,SAAVF;AAGD;;AAED;;AAEF,SAAKP,gBAAgB,CAACgB,WAAtB;AACET,MAAAA,OAAO,GAAG;AACRE,QAAAA,MAAM,EAAE,IADA;AAERI,QAAAA,UAAU,EAAET,MAAM,CAACS;AAFX,OAAVN;AAIA;;AAEF,SAAKP,gBAAgB,CAACiB,iBAAtB;AACA,SAAKjB,gBAAgB,CAACkB,kBAAtB;AACEX,MAAAA,OAAO,GAAG;AACRE,QAAAA,MAAM,EAAA,CAAGN,KAAK,CAACM;AADP,OAAVF;AAGA;;AAEF,SAAKP,gBAAgB,CAACmB,gBAAtB;AACEZ,MAAAA,OAAO,GAAG;AACRE,QAAAA,MAAM,EAAE;AADA,OAAVF;AAGA;;AAEF,SAAKP,gBAAgB,CAACoB,iBAAtB;AACEb,MAAAA,OAAO,GAAG;AACRE,QAAAA,MAAM,EAAE;AADA,OAAVF;AAGA;;AAEF,SAAKP,gBAAgB,CAACqB,kBAAtB;AACEd,MAAAA,OAAO,GAAG;AACRG,QAAAA,YAAY,EAAEN,MAAM,CAACM,YADb;AAERG,QAAAA,UAAU,EAAEP,KAAK,CAACQ,YAANR,CAAmBF,MAAM,CAACM,YAA1BJ;AAFJ,OAAVC;AAIA;;AAEF,SAAKP,gBAAgB,CAACsB,iCAAtB;AACA,SAAKtB,gBAAgB,CAACuB,qBAAtB;AACEhB,MAAAA,OAAO,GAAG;AACRM,QAAAA,UAAU,EAAET,MAAM,CAACS;AADX,OAAVN;AAGA;;AAEF,SAAKP,gBAAgB,CAACwB,aAAtB;AACEjB,MAAAA,OAAO,GAAG;AACRE,QAAAA,MAAM,EAAER,eAAe,CAACK,KAAD,EAAQ,QAAR,CADf;AAERI,QAAAA,YAAY,EAAET,eAAe,CAACK,KAAD,EAAQ,cAAR,CAFrB;AAGRO,QAAAA,UAAU,EAAEZ,eAAe,CAACK,KAAD,EAAQ,YAAR;AAHnB,OAAVC;AAKA;;;AAGA,YAAM,IAAIkB,KAAJ,CAAU,4CAAV,CAAN;AAnEJ;;AAsEA,SAAM,aAAA,CAAA,EAAA,EAAMtB,KAAN,EACDI,OADC,CAAN;AAIF","sourcesContent":["import * as stateChangeTypes from './types';\nimport { getDefaultValue } from './utils';\nexport function useTypeaheadReducer(state, action) {\n  const {\n    type,\n    props\n  } = action;\n  let changes;\n\n  switch (type) {\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index])\n      };\n      break;\n\n    case stateChangeTypes.InputBlur:\n      if (state.isOpen) {\n        changes = {\n          isOpen: false\n        };\n      }\n\n      break;\n\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen\n      };\n      break;\n\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true\n      };\n      break;\n\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false\n      };\n      break;\n\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      };\n      break;\n\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue\n      };\n      break;\n\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue')\n      };\n      break;\n\n    default:\n      throw new Error('Reducer called without proper action type.');\n  }\n\n  return { ...state,\n    ...changes\n  };\n}\n//# sourceMappingURL=reducer.js.map"]},"metadata":{},"sourceType":"module"}