{"ast":null,"code":"import { createContext } from 'react';\nexport var HybridContext = createContext({\n  colorMode: {\n    colorMode: 'light',\n    toggleColorMode: function toggleColorMode() {},\n    setColorMode: function setColorMode() {},\n    accessibleColors: false,\n    setAccessibleColors: function setAccessibleColors() {}\n  }\n});\n;\n;\n\n(function () {\n  var _a, _b;\n\n  if (typeof self !== 'undefined' && '$RefreshHelpers$' in self) {\n    var currentExports = __webpack_module__.exports;\n    var prevExports = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n    self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n\n    if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n      __webpack_module__.hot.dispose(function (data) {\n        data.prevExports = currentExports;\n      });\n\n      import.meta.webpackHot.accept();\n\n      if (prevExports !== null) {\n        if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n          __webpack_module__.hot.invalidate();\n        } else {\n          self.$RefreshHelpers$.scheduleUpdate();\n        }\n      }\n    } else {\n      var isNoLongerABoundary = prevExports !== null;\n\n      if (isNoLongerABoundary) {\n        __webpack_module__.hot.invalidate();\n      }\n    }\n  }\n})();","map":{"version":3,"sources":["C:\\projects\\json-color-palette-generator\\node_modules\\native-base\\lib\\module\\core\\hybrid-overlay\\Context.js"],"names":["createContext","HybridContext","colorMode","toggleColorMode","setColorMode","accessibleColors","setAccessibleColors"],"mappings":"AAAA,SAASA,aAAT,QAA8B,OAA9B;AACA,OAAO,IAAMC,aAAa,GAAgBD,aAAa,CAAC;AACtDE,EAAAA,SAAS,EAAE;AACTA,IAAAA,SAAS,EAAE,OADF;AAETC,IAAAA,eAAe,EAAE,2BAAM,CAAE,CAFhB;AAGTC,IAAAA,YAAY,EAAE,wBAAM,CAAE,CAHb;AAITC,IAAAA,gBAAgB,EAAE,KAJT;AAKTC,IAAAA,mBAAmB,EAAE,+BAAM,CAAE;AALpB;AAD2C,CAAD,CAAhD","sourcesContent":["import { createContext } from 'react';\nexport const HybridContext = /*#__PURE__*/createContext({\n  colorMode: {\n    colorMode: 'light',\n    toggleColorMode: () => {},\n    setColorMode: () => {},\n    accessibleColors: false,\n    setAccessibleColors: () => {}\n  }\n});\n//# sourceMappingURL=Context.js.map"]},"metadata":{},"sourceType":"module"}